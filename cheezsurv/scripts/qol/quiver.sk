options:
  allowedItems: arrow or tipped arrow or spectral arrow
  allowedEntities: arrow or spectral arrow # tipped arrows share an entity id with arrows

command /quiver <offlineplayer=%player%> [<text>]:
  aliases: /q
  trigger:
    set {_p} to arg-1
    if player is not op:
      set {_p} to player

    open chest with 1 row named "%{_p}%'s Quiver" to player
    set {quiver.edit.%player%} to {_p}
    play sound "item.armor.equip_generic" to player
    send action bar "§aOpening %{_p}%§a's quiver..." to player
    if arg-2 starts with "-n":
      player is op
      set {quiver.edit.%player%.no_save} to true
      send action bar "§aOpening %{_p}%§a's quiver in no save mode..." to player
    wait 1 tick

    add {quiver.inventory::%{_p}%::*} to current inventory of player
on inventory close:
  {quiver.edit.%player%} is set
  play sound "item.armor.equip_generic" to player

  if {quiver.edit.%player%.no_save} is true:
    send action bar "§aClosing %{quiver.edit.%player%}%§a's quiver without saving..." to player
    delete {quiver.edit.%player%.no_save}
  else:
    send action bar "§aClosing and saving %{quiver.edit.%player%}%§a's quiver..." to player

    delete {quiver.inventory::%{quiver.edit.%player%}%::*}
    loop items in current inventory of player:
      if loop-item is {@allowedItems}:
        add loop-item to {quiver.inventory::%{quiver.edit.%player%}%::*}
      else:
        set {_item_name} to "%type of loop-item%"
        send "§cYou may not store a [§o%{_item_name} in uppercase%§c] in a quiver!"
        drop loop-item at player
  
  delete {quiver.edit.%player%}


command /togglequiver:
  trigger:
    if {quiver.enabled.%player%} is not set:
      set {quiver.enabled.%player%} to false
    
    if {quiver.enabled.%player%} is false:
      set {quiver.enabled.%player%} to true
      send "§a§lENABLED. §aYou will now receive extra arrows when shooting your bow. Place arrows in your quiver with /quiver."
    else if {quiver.enabled.%player%} is true:
      set {quiver.enabled.%player%} to false
      send "§c§lDISABLED. §cYou will no longer attempt to get extra arrows from your quiver when shooting your bow."


on shoot:
  shooter's gamemode is not creative
  shooter's gamemode is not spectator
  projectile is {@allowedEntities} 
  
  if {quiver.enabled.%shooter%} is not set:
    set {quiver.enabled.%shooter%} to false
    send "§3Want to automatically get arrows resupplied when you use your bow? §b/togglequiver%nl%§3§oThis message will only appear once." to shooter

  {quiver.enabled.%shooter%} is true

  if metadata "quiver_resupplying" of shooter is true:
    delete metadata "quiver_resupplying" of shooter
    stop
  if {quiver.inventory::%shooter%::*} contains {@allowedItems}:
    set metadata "quiver_resupplying" of shooter to true
    loop {quiver.inventory::%shooter%::*}:
      loop-value is {@allowedItems}

      # this is garbage but skript removed the ducking item amount expression
      set {_str} to "%loop-value%"
      set {_amt} to first 2 characters of {_str}
      replace all " " in {_amt} with ""
      set {_amt} to {_amt} parsed as integer

      # takes 1 from the item stack chosen    
      loop {quiver.inventory::%shooter%::*}:
        if loop-index-1 = loop-index-2:
          add ({_amt} - 1) of loop-value-2 to {_new_quiver::*}
        else:
          add loop-value-2 to {_new_quiver::*}
      set {quiver.inventory::%shooter%::*} to {_new_quiver::*}

      # give 1 of loop-value to shooter # for some reason this gives two arrows
      drop 1 of loop-value at shooter # and this only drops one arrow because skript is garbage
      send action bar "Resupplied 1 %1 of loop-value% from your quiver. (/togglequiver)" to shooter

      stop loop # do not ducking remove this you idot or itll crash the server
  else:
    send action bar "Your quiver is empty! (/togglequiver)" to shooter