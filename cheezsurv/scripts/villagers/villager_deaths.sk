options:
  discordChannelId: %{config.discord_chat}%
  recentAttackTime: 15 seconds

function capitalize(t: text) :: text:
  set {_first_char} to first character of {_t}
  set {_remaining_chars} to last (length of {_t} - 1) characters of {_t}
  set {_output} to "%{_first_char} in upper case%%{_remaining_chars}%"
  return {_output}

on script load:
  loop {recently_attacked::*}:
    delete {recently_attacked.%{recently_attacked::%loop-index%}%}
    remove {recently_attacked::%loop-index%} from {recently_attacked::*}

on death of villager:
  set {_villager_name} to display name of victim otherwise "Villager"
  set {_id} to {villagerid.%victim's entity uuid%} otherwise "[unassigned]"
  if attacker is set:
    set {_attacker_name} to display name of attacker otherwise capitalize("%attacker%")

  if victim is leashed:
    if attacker is set:
      set {death_msg} to "%{_villager_name}% was executed by hanging by %{_attacker_name}%"
    else:
      set {death_msg} to "%{_villager_name}% was executed by hanging"
  else:
    set {_murder_variations::*} to "murdered", "assassinated", "slaughtered", "nuked", "killified", "terminated", "deprecated", "annihilated", "killed to death", "put down", "euthanized", "butchered", and "deleted"
    set {_died_variations::*} to "died", "removed from existence", "cancelled their free trial of life", and "had their existence suspended"

    if attacker is set:
      set {death_msg} to "%{_villager_name}% was %random element out of {_murder_variations::*}% by %{_attacker_name}%"
    else:
      set {death_msg} to "%{_villager_name}% %random element out of {_died_variations::*}% from %damage cause%"


  send ":skull: **%{death_msg}%  |  [COORDS: %x-coordinate of victim%, %y-coordinate of victim%, %z-coordinate of victim% | ID: %{villagerid.%victim's entity uuid%}% | WORLD: %world of victim%]**" to channel with id "{@discordChannelId}" with "Cheezy"
  loop all players:
    set {villager_death_messages.%loop-player%} to true if {villager_death_messages.%loop-player%} is not set
    {villager_death_messages.%loop-player%} is true
    send "%{death_msg}%" to loop-player
  
  delete {villagerid.%victim's entity uuid%}
  
command /villagerdeathmessages:
  aliases: /villdeathmsgs, /vdm
  trigger:
    set {villager_death_messages.%player%} to true if {villager_death_messages.%player%} is not set
    if {villager_death_messages.%player%} is true:
      set {villager_death_messages.%player%} to false
      send "§aUnsubscribed from villager death messages."
    else if {villager_death_messages.%player%} is false:
      set {villager_death_messages.%player%} to true
      send "§aSubscribed to villager death messages."


# on damage:
#     victim is villager
#     add victim's entity uuid to {recently_attacked::*} # make it so that if the server stops before the wait time is over, that the variable doesnt clog everything and have the server delete it on startup
#     set {recently_attacked.%victim's entity uuid%} to display name of attacker otherwise capitalize("%attacker%")
#     wait {@recentAttackTime}
#     delete {recently_attacked.%victim's entity uuid%}
#     remove victim's entity uuid from {recently_attacked::*}