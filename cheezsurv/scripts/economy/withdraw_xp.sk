options:
  bottleName: §2Bottled XP
  bottleLore: §a§nSigner
  bottleLoreCurrency: XP Points
  minXpWithdrawn: 12
  maxXpWithdrawn: 100000
  maxBottleAmount: 64
  maxLevelCalc: 2^16

function getLevelsFromXp(pts: integer) :: number:
  set {_lvl} to 0
  loop {@maxLevelCalc} times:
    set {_xp_at_lvl} to calcExperience("%loop-number%" parsed as int)
    if {_xp_at_lvl} > {_pts}:
      set {_lvl} to loop-number
      stop loop
    if loop-number = {@maxLevelCalc}:
      return loop-number
  return {_lvl} - 1

function giveBottledXp(val: number, amt: number, signer: text) :: item:
  return {_amt} of xp bottle named "{@bottleName}" with lore "{@bottleLore}:§a %{_signer}%", "§d§o%{_val}% §d§o{@bottleLoreCurrency}", and "§d§o≈ %getLevelsFromXp({_val})%§d§o XP Levels"

command /xpbalance <player=%player%>:
  aliases: /xpbal
  trigger:
    send "§2%arg-1%§2's XP: §a%total xp of player% §aPoints or %arg-1's level%§a Levels"

command /xpleveltopoints <integer>:
  trigger:
    send "§a%arg-1%§2 Levels is equal to §a%calcExperience(arg-1)%§2 Points if you started with 0 XP."

command /getxpbottle <number> <number=1>:
  executable by: players
  aliases: /getbottledxp
  trigger:
    player has permission "*"
    give player giveBottledXp(arg-1, arg-2, "Console")

command /bottlexp [<integer>] <integer=1>:
  executable by: players
  aliases: /withdrawxp, /withxp
  trigger:
    if arg-1 is not set:
      send "§c/bottlexp <Points> [Bottles]"
      stop

    set {_xp_withdrawn} to arg-1 * arg-2

    if total xp of player < {_xp_withdrawn}:
      send "§cInsufficent {@bottleLoreCurrency}!"
      stop
    if arg-1 < {@minXpWithdrawn}:
      send "§cTo prevent XP duplication, you may not withdraw less than {@minXpWithdrawn} {@bottleLoreCurrency} per bottle."
      stop
    if arg-1 > {@maxXpWithdrawn}:
      send "§cYou may not store more than {@maxXpWithdrawn} {@bottleLoreCurrency} in a single bottle."
      stop
    if arg-2 > {@maxBottleAmount}:
      send "§cYou may only withdraw up to {@maxBottleAmount} bottles at a time."
      stop
    if player's inventory cannot hold arg-2 of xp bottle named "{@bottleName}":
      send "§cInsufficient inventory space!"
      stop
    remove {_xp_withdrawn} from total xp of player
    give player giveBottledXp(arg-1, arg-2, "%player%")
    send "§2Withdrew §a%{_xp_withdrawn}%§2 {@bottleLoreCurrency} in §a%arg-2%§2 bottles of §a%arg-1%§2 {@bottleLoreCurrency}."

on right click:
  if name of player's tool is not "{@bottleName}":
    stop
  
  cancel event
  
  set {_lore} to uncoloured line 2 of lore of player's tool
  replace all "{@bottleLoreCurrency}" in {_lore} with ""
  remove 1 from item amount of player's tool

  set {_xp_amt} to ({_lore} parsed as number)

  add {_xp_amt} to total xp of player
  
  send action bar "§2Redeemed §a%{_lore}%§2{@bottleLoreCurrency}" to player
  play sound "entity.experience_orb.pickup" at volume 0.25 to player