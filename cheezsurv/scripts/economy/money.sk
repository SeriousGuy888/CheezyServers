options:
  coinName: §6Coin
  coinLore: §ePyrite Standard

  banknoteName: §6Banknote
  banknoteLore: §ePyrite Standard

  discordChannelId: %{config.economy_log_channel}% # economy logs channel


on script load:
  delete {banknote_denominations::*}

  add 0.01 to {banknote_denominations::*}
  add 0.05 to {banknote_denominations::*}
  add 0.10 to {banknote_denominations::*}
  add 0.25 to {banknote_denominations::*}
  add 5 to {banknote_denominations::*}
  add 10 to {banknote_denominations::*}
  add 20 to {banknote_denominations::*}
  add 50 to {banknote_denominations::*}
  add 100 to {banknote_denominations::*}


function giveCoin(a: number) :: item:
  return {_a} of sunflower named "{@coinName}" with lore "{@coinLore}"

function giveBanknote(d: number, a: number) :: item:
  return {_a} of shiny paper named "{@banknoteName}" with lore "{@banknoteLore}" and "§7%{_d}%§7c"

every 5 seconds:
  send {economy.logs.pending} to channel with id "{@discordChannelId}" with "Cheezy"
  set {economy.logs.pending} to ""

  loop all players:
    set {bank.balance::%loop-player%} to 0 if {bank.balance::%loop-player%} is not set

function logEconomyAction(a: text):
  set {economy.logs.pending} to "%{economy.logs.pending}%%nl%[%now%] %{_a}%"


function repeat(s: string, n: integer) :: string:
  set {_r} to ""
  loop {_n} times:
    set {_r} to "%{_r}%%{_s}%"
  return {_r}

function approxifyNumber(n: number) :: text:
  set {_data} to "Q,18|q,15|T,12|B,9|M,6|K,3"
  loop split {_data} at "|":
    set {_s::*} to split loop-value at ","
    {_n} >= 10 ^ {_s::2} parsed as number
    return "%{_n} / 10 ^ {_s::2} parsed as number%%{_s::1}%"
  return "%{_n}%"

function goodifyNumber(n: number) :: text:
  set {_r} to approxifyNumber(round({_n}))
  return "%{_r}%"




command /getcoin <number=1>:
  executable by: players
  trigger:
    player has permission "*"
    give player giveCoin(arg-1)

command /getbanknote <number> <number=1>:
  executable by: players
  trigger:
    player has permission "*"
    give player giveBanknote(arg-1, arg-2)



command /balance <OfflinePlayer=%player%>:
  aliases: /bal
  trigger:
    send "§3Bank balance of §b%arg-1%§3 is §b%{bank.balance::%arg-1%}% §3coins."

command /balancetop <number=1>:
  aliases: /baltop
  trigger:
    loop {bank.balance::*}:
      add 1 to {_size}
      if {_low_to_high_list::%loop-value%} is not set:
        set {_low_to_high_list::%loop-value%} to loop-index
      else:
        set {_n} to 0
        loop {_size} times:
          add 1 to {_n}
          if {_low_to_high_list::%loop-value-1%.%{_n}%} is not set:
            set {_low_to_high_list::%loop-value-1%.%{_n}%} to loop-index
          stop loop
    wait 1 tick
    set {_n} to size of {_low_to_high_list::*}
    loop {_low_to_high_list::*}:
      set {_high_to_low_list::%{_n}%} to loop-value
      subtract 1 from {_n}
    wait 1 tick
    set {_total_players} to 0
    send "§6§l§nCheezSurv Richest Players"
    send "§7§oValues are rounded. Use /bal for exact values.%nl%"
    loop {_high_to_low_list::*}:
      add 1 to {_ranking}
      {bank.balance::%loop-value%} > 0
      set {_player} to "%loop-value%" parsed as offline player
      send "§7%{_ranking}%§7. §2%{_player}% §7→ §a%goodifyNumber({bank.balance::%loop-value%})%§a coins"
      if {_ranking} = 25:
        stop loop
      add 1 to {_total_players}
    # send "%nl%§7There are a total of §a%{_total_players}% §7registered accounts"



command /givemoolah <OfflinePlayer> <Number>:
  trigger:
    if player is not op:
      send "§cInsufficient permissions!"
      stop
    add arg-2 to {bank.balance::%arg-1%}
    send "Gave %arg-2%c to %arg-1%"


command /pay [<offlineplayer>] [<number>]:
  executable by: players
  trigger:
    if arg-2 is not set:
      send "§c/pay <player> <amount>"
      stop
    if arg-1 is player:
      send "§cYou can't send money to yourself."
      stop
    if {bank.balance::%player%} < arg-2:
      send "§cInsufficient funds!"
      stop
    if arg-2 <= 0:
      send "§cYou can't send negative or zero amounts you idot."
      stop
    
    remove arg-2 from {bank.balance::%player%}
    add arg-2 to {bank.balance::%arg-1%}

    if arg-1 is online:
      send "§2Paid §a%arg-2%§2 coins to §a%arg-1%§2."
      send "§2Received §a%arg-2%§2 coins from §a%player%§2." to arg-1
      logEconomyAction("`%player%` paid `%arg-2%` coins to `%arg-1%` via /pay")
    else:
      send "§2Paid §a%arg-2%§2 coins to §a%arg-1%§2.%nl%§2You are able to cencel this payment until this player next comes online with §a/outgoingpayments§2."
      add arg-2 to {economy.outgoing_payments::%player%::%arg-1%}
      add player to {economy.incoming_payments::%arg-1%::*}
      logEconomyAction("`%player%` paid `%arg-2%` coins to offline player `%arg-1%` via /pay")

command /outgoingpayments:
  executable by: players
  trigger:

    open chest with 6 rows named "Outgoing Payments" to player
    wait 1 tick
    loop 54 times: # I can't be bothered to paginate this skript is just so discughskjting
      format slot (loop-number - 1) of player with light gray stained glass pane named " " to be unstealable

    set {_inc} to 0
    loop {economy.outgoing_payments::%player%::*}:
      set {_item} to skull of (loop-index parsed as offline player) named "§6%loop-index parsed as offline player%"
      format slot {_inc} of player with {_item} with lore "§6Payment: §e%loop-value%§ec" to run [remove loop-value from {bank.balance::%(loop-index parsed as offline player)%}]->[add loop-value to {bank.balance::%player%}]->[logEconomyAction("`%player%` cancelled their payment of `%loop-value%` coins to `%(loop-index parsed as offline player)%`")]->[send "§2Your payment of §a%loop-value%§ac §2to §a%(loop-index parsed as offline player)% §2was successfully cancelled!"]->[delete {economy.outgoing_payments::%player%::%loop-index%}]->[remove player from {economy.incoming_payments::%loop-index%::*}]->[make player execute command "/outgoingpayments"]
      add 1 to {_inc}

on join:
  loop {economy.incoming_payments::%player%::*}:
    send "§6You were paid §e%{economy.outgoing_payments::%loop-value%::%player%}%§ec §6by §e%loop-value% §6while you were offline."
    delete {economy.outgoing_payments::%loop-value%::%player%}
    remove loop-value from {economy.incoming_payments::%player%::*}


command /withdraw [<text>]:
  executable by: players
  aliases: /with, /wd
  trigger:
    open chest with 3 rows named "§8Withdraw Moolah §7[Bal: %{bank.balance::%player%}%§7c]" to player
    wait 1 tick
    loop 27 times:
      format slot (loop-number - 1) of player with light gray stained glass pane named " " to be unstealable
    
    # look what i have to do because skript's loops randomly break stuff here
    format slot 0 of player with giveBanknote(0.01, 1) to run [make player execute command "/banknote 0.01"]->[make player execute command "/with"]
    format slot 1 of player with giveBanknote(0.05, 1) to run [make player execute command "/banknote 0.05"]->[make player execute command "/with"]
    format slot 2 of player with giveBanknote(0.1, 1) to run [make player execute command "/banknote 0.1"]->[make player execute command "/with"]
    format slot 3 of player with giveBanknote(0.25, 1) to run [make player execute command "/banknote 0.25"]->[make player execute command "/with"]
    format slot 4 of player with giveBanknote(5, 1) to run [make player execute command "/banknote 5"]->[make player execute command "/with"]
    format slot 5 of player with giveBanknote(10, 1) to run [make player execute command "/banknote 10"]->[make player execute command "/with"]
    format slot 6 of player with giveBanknote(20, 1) to run [make player execute command "/banknote 20"]->[make player execute command "/with"]
    format slot 7 of player with giveBanknote(50, 1) to run [make player execute command "/banknote 50"]->[make player execute command "/with"]
    format slot 8 of player with giveBanknote(100, 1) to run [make player execute command "/banknote 100"]->[make player execute command "/with"]

    format slot 22 of player with giveCoin(1) to run [make player execute command "/coin 1"]->[make player execute command "/with"]
    
    


command /coin <integer>:
  executable by: players
  aliases: /coins
  trigger:
    if arg-1 is not set:
      send "§c§lWithdraw in coins:%nl%§c/coin <amount>"
      stop

    if arg-1 <= 0:
      send "§cYou may not withdraw a negative or zero amount!"
      logEconomyAction("`%player%` attempted and failed to withdraw `%arg-1%` coins in coins - Negative or zero amount")
      stop
    
    if {bank.balance::%player%} is less than arg-1:
      send "§cInsufficient funds! /bal"
      logEconomyAction("`%player%` attempted and failed to withdraw `%arg-1%` coins in coins - Insufficient funds")
      stop

    if player's inventory cannot hold arg-1 of sunflower:
      send "§cInsufficient inventory space!"
      logEconomyAction("`%player%` attempted and failed to withdraw `%arg-1%` coins in coins - Insufficient inventory space")
      stop

    remove arg-1 from {bank.balance::%player%}
    give player giveCoin(arg-1)
    logEconomyAction("`%player%` withdrew `%arg-1%` coins in coins")
    send "§2Withdrew §a%arg-1% §2coins from your bank balance."

command /banknote [<number>] [<integer>]:
  executable by: players
  trigger:
    if arg-1 is not set:
      send "§c§lWithdraw moolah in banknotes.%nl%§c/banknote <Denomination> [Amount]"
      stop

    set {_denom} to arg-1
    set {_amount} to arg-2 otherwise 1
    set {_total} to {_denom} * {_amount}

    if {banknote_denominations::*} does not contain {_denom}:
      send "§4Invalid denomination! The valid ones are: §c%{banknote_denominations::*}%"
      logEconomyAction("`%player%` attempted and failed to withdraw `%{_total}%` coins in `%{_amount}%` banknotes of denomination `%{_denom}%` - Invalid denomination")
      stop

    if {_total} <= 0:
      send "§cYou may not withdraw a negative or zero amount!"
      logEconomyAction("`%player%` attempted and failed to withdraw `%arg-1%` coins in `%{_amount}%` banknotes of denomination `%{_denom}%` - Negative or zero amount")
      stop

    if {bank.balance::%player%} is less than {_total}:
      send "§cInsufficient funds! /bal"
      logEconomyAction("`%player%` attempted and failed to withdraw `%{_total}%` coins in `%{_amount}%` banknotes of denomination `%{_denom}%` - Insufficient funds")
      stop
    
    if player's inventory cannot hold {_amount} of paper:
      send "§cInsufficient inventory space!"
      logEconomyAction("`%player%` attempted and failed to withdraw `%{_total}%` coins in `%{_amount}%` banknotes of denomination `%{_denom}%` - Insufficient inventory space")
      stop
    
    remove {_total} from {bank.balance::%player%}
    give player giveBanknote({_denom}, {_amount})
    logEconomyAction("`%player%` withdrew `%{_total}%` coins in `%{_amount}%` banknotes of denomination `%{_denom}%`")
    send "§2Withdrew §a%{_total}% §2coins from your bank balance."



on right click:
  if name of player's tool is not "{@coinName}":
    if name of player's tool is not "{@banknoteName}":
      stop
  
  cancel event
  set {_deposited} to 0

  if name of player's tool is "{@coinName}":
    add 1 to {_deposited}
    remove 1 of player's tool from player
  else if name of player's tool is "{@banknoteName}":
    set {_lore} to uncoloured line 2 of lore of player's tool
    replace all "c" in {_lore} with ""
    add {_lore} parsed as number to {_deposited}
    remove 1 of player's tool from player

  add {_deposited} to {bank.balance::%player%}
  send action bar "§3Deposited §b%{_deposited}%§3 coins. §b/bal" to player
  play sound "block.note_block.pling" at volume 0.25 to player

  logEconomyAction("`%player%` deposited `%{_deposited}%` coins")


  




command /circulation:
  trigger:
    set {_amount} to 0
    loop all offline players:
      add {bank.balance::%loop-offlineplayer%} to {_amount}
    send "§3There are §b%{_amount}%§3 coins in circulation in people's bank balances."