options:
  legacyCoinName: §6Fool's Gold Coin
  coinName: §6Coin
  coinLore: §ePyrite Standard

  banknoteName: §6Banknote
  banknoteLore: §ePyrite Standard

  discordChannelId: 711284320890781757 # economy logs channel


on script load:
  delete {banknote_denominations::*}

  add 0.01 to {banknote_denominations::*}
  add 0.05 to {banknote_denominations::*}
  add 0.10 to {banknote_denominations::*}
  add 0.25 to {banknote_denominations::*}
  add 5 to {banknote_denominations::*}
  add 10 to {banknote_denominations::*}
  add 20 to {banknote_denominations::*}
  add 50 to {banknote_denominations::*}
  add 100 to {banknote_denominations::*}


function giveCoin(a: number) :: item:
  return {_a} of sunflower named "{@coinName}" with lore "{@coinLore}"

function giveBanknote(d: number, a: number) :: item:
  return {_a} of shiny paper named "{@banknoteName}" with lore "{@banknoteLore}" and "§7%{_d}%§7c"

every 5 seconds:
  send {economy.logs.pending} to channel with id "{@discordChannelId}" with "Cheezy"
  set {economy.logs.pending} to ""

  loop all players:
    set {bank.balance.%loop-player%} to 0 if {bank.balance.%loop-player%} is not set
function logAction(a: text):
  set {economy.logs.pending} to "%{economy.logs.pending}%%nl%[%now% UTC] %{_a}%"




command /getcoin <number=1>:
  executable by: players
  trigger:
    player has permission "*"
    give player giveCoin(arg-1)

command /getbanknote <number> <number=1>:
  executable by: players
  trigger:
    player has permission "*"
    give player giveBanknote(arg-1, arg-2)



command /balance <OfflinePlayer=%player%>:
  aliases: /bal
  trigger:
    send "§3Bank balance of §b%arg-1%§3 is §b%{bank.balance.%arg-1%}% §3coins."

# command /balancetop:
#   aliases: /baltop
#   trigger:
#     loop all offline players:
#       set {_len} to 9
#       set {_num} to {bank.balance.%loop-offlineplayer%}
#       set {_p::*} to {_num} split at "."
#       set {_decimals} to {_p::2}
#       set {_num} to {_p::1}

#       set {_padded} to "-1" if length of {_num} > {_len}
#       set {_padded} to "%{_num}%.%{_decimals}%" if length of {_num} = {_len}
#       if length of {_num} < {_len}:
#         loop {_len} - {_num} times:
#           set {_num} to "0%{_num}%"
#         set {_padded} to "%{_num}%.%{_decimals}%"

#       add "%{_padded}%|%loop-offlineplayer%" to {_bals::*}
#     send {_bals::*}




command /withdraw [<text>]:
  executable by: players
  aliases: /with
  trigger:
    send "§bThe /withdraw command has been split into the /coin and /banknote commands."


command /coin <integer>:
  executable by: players
  aliases: /coins
  trigger:
    if arg-1 is not set:
      send "§c§lWithdraw in coins:%nl%§c/coin <amount>"
      stop

    if arg-1 <= 0:
      send "§cYou may not withdraw a negative or zero amount!"
      logAction("`%player%` attempted and failed to withdraw `%arg-1%` coins in coins - Negative or zero amount")
      stop
    
    if {bank.balance.%player%} is less than arg-1:
      send "§cInsufficient funds! /bal"
      logAction("`%player%` attempted and failed to withdraw `%arg-1%` coins in coins - Insufficient funds")
      stop

    if player's inventory cannot hold arg-1 of sunflower:
      send "§cInsufficient inventory space!"
      logAction("`%player%` attempted and failed to withdraw `%arg-1%` coins in coins - Insufficient inventory space")
      stop

    remove arg-1 from {bank.balance.%player%}
    give player giveCoin(arg-1)
    logAction("`%player%` withdrew `%arg-1%` coins in coins")
    send "§2Withdrew §a%arg-1% §2coins from your bank balance."

command /banknote [<number>] [<integer>]:
  executable by: players
  trigger:
    if arg-1 is not set:
      send "§c§lWithdraw moolah in banknotes.%nl%§c/banknote <Denomination> [Amount]"
      stop

    set {_denom} to arg-1
    set {_amount} to arg-2 otherwise 1
    set {_total} to {_denom} * {_amount}

    if {banknote_denominations::*} does not contain {_denom}:
      send "§4Invalid denomination! The valid ones are: §c%{banknote_denominations::*}%"
      logAction("`%player%` attempted and failed to withdraw `%{_total}%` coins in `%{_amount}%` banknotes of denomination `%{_denom}%` - Invalid denomination")
      stop

    if {_total} <= 0:
      send "§cYou may not withdraw a negative or zero amount!"
      logAction("`%player%` attempted and failed to withdraw `%arg-1%` coins in `%{_amount}%` banknotes of denomination `%{_denom}%` - Negative or zero amount")
      stop

    if {bank.balance.%player%} is less than {_total}:
      send "§cInsufficient funds! /bal"
      logAction("`%player%` attempted and failed to withdraw `%{_total}%` coins in `%{_amount}%` banknotes of denomination `%{_denom}%` - Insufficient funds")
      stop
    
    if player's inventory cannot hold {_amount} of paper:
      send "§cInsufficient inventory space!"
      logAction("`%player%` attempted and failed to withdraw `%{_total}%` coins in `%{_amount}%` banknotes of denomination `%{_denom}%` - Insufficient inventory space")
      stop
    
    remove {_total} from {bank.balance.%player%}
    give player giveBanknote({_denom}, {_amount})
    logAction("`%player%` withdrew `%{_total}%` coins in `%{_amount}%` banknotes of denomination `%{_denom}%`")
    send "§2Withdrew §a%{_total}% §2coins from your bank balance."



on right click:
  if name of player's tool is not "{@coinName}":
    if name of player's tool is not "{@legacyCoinName}":
      if name of player's tool is not "{@banknoteName}":
        stop
  
  cancel event
  set {_deposited} to 0

  if name of player's tool is "{@coinName}" or "{@legacyCoinName}":
    add 1 to {_deposited}
    remove 1 from item amount of player's tool
  else if name of player's tool is "{@banknoteName}":
    set {_lore} to uncoloured line 2 of lore of player's tool
    replace all "c" in {_lore} with ""
    add {_lore} parsed as number to {_deposited}
    remove 1 from item amount of player's tool

  add {_deposited} to {bank.balance.%player%}
  send action bar "§3Deposited §b%{_deposited}%§3 coins. §b/bal" to player
  play sound "block.note_block.pling" at volume 0.25 to player

  logAction("`%player%` deposited `%{_deposited}%` coins")


  




command /circulation:
  trigger:
    set {_amount} to 0
    loop all offline players:
      add {bank.balance.%loop-offlineplayer%} to {_amount}
    send "§3There are §b%{_amount}%§3 coins in circulation in people's bank balances."