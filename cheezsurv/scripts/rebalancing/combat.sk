options:
  defaultYVelocity: -0.08

  comboSound: "block.anvil.place" at volume 0.1
  comboTimer: 3.25 seconds
  comboDamageFactor: 0.25
  comboMax: 32
  comboBasicMin: 4
  comboWeaknessThreshold: 3
  maxDistance: 6
  excludedMobs: ender dragon, ender crystal

  shieldChargeSound: "item.shield.block" at volume 1
  shieldChargeEffective: 0.67 seconds
  shieldChargeRadius: 1.5
  shieldChargeCooldown: 10 seconds
  shieldChargeHungerCost: 1
  shieldChargeSaturationCost: 5
  shieldChargeDamage: 5
  shieldChargeForce: 2
  shieldChargeMaxYVel: 0.05
  shieldChargeStunEffect: apply slowness 2 to loop-entity-2 for 3 seconds

function clearCombo(p: player):
  delete {combat.combo.%{_p}%.time}
  set {combat.combo.%{_p}%.count} to 0
  delete {combat.combo.%{_p}%.dmg}
  delete {combat.combo.%{_p}%.basic_buildup}

every 2.5 seconds:
  loop all players:
    if difference between now and {combat.combo.%loop-player%.time} > {@comboTimer}:
      clearCombo(loop-player)
      stop

on damage:
  attacker is set
  victim is player
  if victim is blocking:
    damage cause = attack
    if final damage = 0:
      set {combat.combo.%victim%.time} to now
      set {combat.combo.%victim%.count} to 0 if {combat.combo.%victim%.count} is not set
      add 1 to {combat.combo.%victim%.count} if {combat.combo.%victim%.count} < {@comboMax}
      play sound {@comboSound} to attacker
    # if final damage > 0:
    #   send action bar "damaged while using shield (s)" to victim
  else if victim is not blocking:
    damage cause != thorns
    {combat.combo.%victim%.time} is set

    if final damage <= 3:
      set {_degrade_by} to floor(final damage + 1)
      subtract {_degrade_by} from {combat.combo.%victim%.count}
      set {_m} to "§cCombo degraded by %abs({_degrade_by})% §cfrom taking damage! §7(/togglecombatmessage)"
    else:
      clearCombo(victim)
      set {_m} to "§cCombo cleared due to taking damage! §7(/togglecombatmessage)"
    
    set {combat.enable_info_msg.chat.%victim%} to true if {combat.enable_info_msg.chat.%victim%} is not set
    send {_m} to victim if {combat.enable_info_msg.chat.%victim%} is true

on damage:
  attacker is player
  damage cause != thorns
  final damage > 0
  {@excludedMobs} does not contain victim

  set {_combo_count_addend} to 1

  #critical hit detection
  if y of attacker's velocity < {@defaultYVelocity}:
    damage cause = attacker
    set {_combo_count_addend} to 2

  if difference between now and {combat.combo.%attacker%.time} < {@comboTimer}:
    victim != attacker
    distance between location of attacker and location of victim < {@maxDistance}
    set {combat.combo.%attacker%.time} to now
    set {combat.combo.%attacker%.count} to 0 if {combat.combo.%attacker%.count} is not set
    add {_combo_count_addend} to {combat.combo.%attacker%.count} if {combat.combo.%attacker%.count} + {_combo_count_addend} <= {@comboMax}
    play sound {@comboSound} to attacker
    add ({combat.combo.%attacker%.count} * {@comboDamageFactor}) / 2 to damage
    if {combat.combo.%attacker%.count} >= {@comboWeaknessThreshold}:
      if active potion effects of victim does not contain "weak":
        apply weakness to victim for 2 seconds
    set {combat.combo.%attacker%.dmg} to final damage * 2
  
  if {combat.combo.%attacker%.victim} = victim:
    set {combat.combo.%attacker%.time} to now
    if difference between now and {combat.combo.%attacker%.time} < {@comboTimer}:
      add 1 to {combat.combo.%attacker%.basic_buildup}

      if {combat.combo.%attacker%.basic_buildup} >= {@comboBasicMin}:
        add {_combo_count_addend} to {combat.combo.%attacker%.count} if {combat.combo.%attacker%.count} + {_combo_count_addend} <= {@comboMax}
  else:
    set {combat.combo.%attacker%.victim} to victim
    set {combat.combo.%attacker%.basic_buildup} to 0

on left click:
  set {combat.shield_charge.%player%.enabled} to true if {combat.shield_charge.%player%.enabled} is not set
  {combat.shield_charge.%player%.enabled} is true

  player's tool is shield
  player's gamemode is not spectator
  player's facing is not up or down
  player's glider state is false

  if player's hunger <= {@shieldChargeHungerCost}:
    player's gamemode is not creative
    send "§cInsufficient hunger! §7(/togglecombatmessage)" if {combat.enable_info_msg.chat.%player%} is true
    stop
  if difference between now and {combat.shield_charge.%player%.time} < {@shieldChargeCooldown}:
    send "§6Shield charge cooldown: §e%difference between {@shieldChargeCooldown} and (difference between now and {combat.shield_charge.%player%.time})% §7(/togglecombatmessage)" if {combat.enable_info_msg.chat.%player%} is true
    stop

  if player's gamemode is not creative:
    subtract {@shieldChargeHungerCost} / 2 from player's hunger
    subtract {@shieldChargeSaturationCost} from player's saturation
  set player's saturation to (player's hunger * 2) if (player's hunger * 2) < player's saturation
  push player forward with force {@shieldChargeForce}
  set y of player's velocity to min(y of player's velocity, {@shieldChargeMaxYVel})
  send "§aShield charge §7(/togglecombatmessage)" if {combat.enable_info_msg.chat.%player%} is true
  set {combat.shield_charge.%player%.time} to now
  set metadata "shield_charging" of player to true

every tick:
  loop all players:
    metadata "shield_charging" of loop-player is true
    if difference between now and {combat.shield_charge.%loop-player%.time} > {@shieldChargeEffective}:
      clear metadata "shield_charging" of loop-player
      loop all entities:
        clear metadata "shield_charge_damaged_by_%loop-player%" of loop-entity-2
      stop
    loop all entities in radius {@shieldChargeRadius} around loop-player:
      loop-entity-2 is not loop-player
      metadata "shield_charge_damaged_by_%loop-player%" of loop-entity-2 is not true
      make loop-player damage loop-entity-2 by {@shieldChargeDamage}
      # if active potion effects of loop-entity-2 does not contain "slow":
      {@shieldChargeStunEffect}
      play sound {@shieldChargeSound} to loop-player
      set metadata "shield_charge_damaged_by_%loop-player%" of loop-entity-2 to true



every 5 ticks:
  loop all players:
    if loop-player's tool is shield:
      if difference between now and {combat.shield_charge.%loop-player%.time} < {@shieldChargeCooldown}:
        send action bar "§5Shield Charge Cooldown: §d%difference between {@shieldChargeCooldown} and (difference between now and {combat.shield_charge.%loop-player%.time})%" to loop-player
      else:
        send action bar "§5Shield Charge Ready" to loop-player if loop-player's gliding state is false
        send action bar "§4[X]§c You may not use shield charge while gliding." to loop-player if loop-player's gliding state is true
    else:
      {combat.enable_info_msg.combo.%loop-player%} is true

      {combat.combo.%loop-player%.time} is set
      set {_combo_time} to difference between now and {combat.combo.%loop-player%.time}
      {_combo_time} < {@comboTimer}
      set {_count} to {combat.combo.%loop-player%.count}
      {_count} >= 1

      set {_timer} to difference between {@comboTimer} and {_combo_time}
      set {_damage_bonus} to {_count} * {@comboDamageFactor}
      set {_damage_dealt} to {combat.combo.%loop-player%.dmg}

      set {_actionbar} to "§6§lCombo x%{_count}%§7: §e%{_timer}% §4(§c+%{_damage_bonus}% DMG§4) §7|§c %{_damage_dealt} otherwise 0%HP §4Dealt"
      send action bar {_actionbar} to loop-player



on join:
  set {combat.enable_info_msg.chat.%player%} to true if {combat.enable_info_msg.chat.%player%} is not set
  set {combat.enable_info_msg.combo.%player%} to true if {combat.enable_info_msg.combo.%player%} is not set

command /togglecombatinfo [<text>]:
  trigger:
    set {_valid_options::*} to ("chat", "combo")
    set {_opt} to arg-1 in lowercase
    # if {_opt} is not set:
    #   open chest with 1 row named "Combat Info Control Panel" to player
    #   wait 1 tick
    #   loop 9 times:
    #     format slot (loop-number - 1) of player with light gray stained glass pane named " " to be unstealable
    #   loop {_valid_options::*}:
    #     set {_item} to red concrete
    #     set {_item} to lime concrete if {combat.enable_info_msg.%loop-value%.%player%} is true
    #     set {_conf_text} to "§cfalse"
    #     set {_conf_text} to "§atrue" if {combat.enable_info_msg.%loop-value%.%player%} is true
    #     format slot (loop-index parsed as number - 1) of player with {_item} named "§e%loop-value in uppercase%" with lore {_conf_text} to run [make player execute command "/togglecombatinfo %loop-value%"]
    #   stop
    if {_valid_options::*} does not contain {_opt}:
      send "§cValid options: %{_valid_options::*}%"
      stop
    if {combat.enable_info_msg.%{_opt}%.%player%} is false:
      set {combat.enable_info_msg.%{_opt}%.%player%} to true
      send "§6Combat info option §e%{_opt}% §6turned §aon§6."
    else if {combat.enable_info_msg.%{_opt}%.%player%} is true:
      set {combat.enable_info_msg.%{_opt}%.%player%} to false
      send "§6Combat info option §e%{_opt}% §6turned §coff§6."

command /toggleshieldcharge:
  aliases: /toggleshieldbash
  trigger:
    set {combat.shield_charge.%player%.enabled} to true if {combat.shield_charge.%player%.enabled} is not set
    if {combat.shield_charge.%player%.enabled} is true:
      set {combat.shield_charge.%player%.enabled} to false
      send "§6Enabled shield charges."
    else if {combat.shield_charge.%player%.enabled} is false:
      set {combat.shield_charge.%player%.enabled} to true
      send "§6Disabled shield charges."

command /togglecombatmessage:
  aliases: /togglecombatmsg
  trigger:
    send "This command has been merged into another command. Run command §7/togglecombatinfo chat§r."