options:
  spellbookName: "§5Spellbook"
  wandName: "§5Magic Stick"
  wandLore: "§dRight click to quickly swap to shield charm." and "§dSneak right click to open spell menu."
  wandCoreName: "§5Magic Stick Core"


  spellRange: 100
  spellFireDelay: 7 # 7/10 seconds
  beetrootRegenTime: 60
  beetrootMultiplier: 16

  shieldSpellDuration: 3
  damageSpellDamage: 5
  maxMagicXpLevelChangeAtOnce: 10



variables:
  {magic.spell_costs::shield} = 10
  {magic.spell_costs::hunger} = 2

  {magic.spell_costs::disarm} = 15
  {magic.spell_costs::repulse} = 20
  {magic.spell_costs::kidnap} = 22
  {magic.spell_costs::armour_swap} = 20
  {magic.spell_costs::freeze} = 25

  {magic.spell_costs::damage} = 15
  {magic.spell_costs::burn} = 20
  {magic.spell_costs::combust} = 50

  {magic.spell_costs::kill_dog} = 75


  {magic.leveling_constants.base} = 1.02      # magic number that does the exponenting or something idk
  {magic.leveling_constants.const} = 50      # base amount of xp needed for leveling up to level 1



function getSpellUnlocked(p: player, s: string) :: boolean:
  return {magic.spells::%{_p}%::%{_s}%}
function setSpellUnlocked(p: player, s: string, v: boolean):
  set {magic.spells::%{_p}%::%{_s}%} to {_v}
function spellItem(p: player, i: itemtype, s: string) :: itemtype:
  if getSpellUnlocked({_p}, {_s}) is true:
    return {_i}
  else:
    return iron bars


function selectSpell(p: player, s: string):
  if getSpellUnlocked({_p}, {_s}) is not true:
    if level of {_p} >= {magic.spell_costs::%{_s}%}:
      addXpLevels({_p}, 0 - {magic.spell_costs::%{_s}%})
      setSpellUnlocked({_p}, {_s}, true)
      send "§a%{magic.spell_costs::%{_s}%}% §2XP levels spent to unlock the spell §a%{_s}%§2." to {_p}
      make {_p} execute command "/spellmenu"
    else:
      send "§c%{magic.spell_costs::%{_s}%}% §4XP levels are required to unlock this spell!" to {_p}
    stop

  set {_spell_before_swap} to metadata "sel_magic_spell" of {_p}
  if {_spell_before_swap} is "shield":
    quickswapShieldSpell({_p})
  set metadata "sel_magic_spell" of {_p} to {_s}
  send "§3Selected spell changed from §b%{_spell_before_swap}%§3 to §b%{_s}%§3." to {_p}
  close {_p}'s inventory


function holdingWand(p: player) :: boolean:
  if name of {_p}'s tool is {@wandName}:
    return true
  else:
    return false

function hasSpellbook(p: player) :: boolean:
  if name of {_p}'s offhand tool is {@spellbookName}:
    return true
  else:
    return false



# function for calculating the amount of xp to the next
# level at a certain level based on an exponential function
# https://www.desmos.com/calculator/auubsajefh
function getMagicXpToLevelUp(lvl: number) :: number:
  set {_base} to {magic.leveling_constants.base}
  set {_factor} to {magic.leveling_constants.factor}
  set {_const} to {magic.leveling_constants.const}
  return {_base} ^ {_lvl} * {_const} # returns the xp needed for the level

# function getMagicLevel(xp: number) :: number:
#   set {_base} to {magic.leveling_constants.base}
#   set {_factor} to {magic.leveling_constants.factor}
#   set {_const} to {magic.leveling_constants.const}

#   # i dont understand any of this
#   # https://www.symbolab.com/solver/algebra-calculator/y%3D%5Cleft(l%5E%7Bx%7D%5Cright)%5Ccdot%20a
#   return (ln({_xp} / {_const})) / (ln({_base})) # returns level at specified xp

function addMagicXp(p: player, amt: number):
  set {magic.xp::%{_p}%.points} to 0 if {magic.xp::%{_p}%.points} is not set
  set {magic.xp::%{_p}%.level} to 0 if {magic.xp::%{_p}%.level} is not set

  set {_curr_lvl} to {magic.xp::%{_p}%.level} otherwise 0
  set {_next_lvl_up} to getMagicXpToLevelUp({_curr_lvl})

  add {_amt} to {magic.xp::%{_p}%.points}
  set {_i} to 0
  while {magic.xp::%{_p}%.points} > {_next_lvl_up}: # level up
    add 1 to {_i}
    if {_i} > {@maxMagicXpLevelChangeAtOnce}:
      stop
    subtract {_next_lvl_up} from {magic.xp::%{_p}%.points}
    add 1 to {magic.xp::%{_p}%.level}
    send "§5§l↑ You are now §dLevel %{magic.xp::%{_p}%.level}% §5§lin magic XP." to {_p}

  set {_i} to 0
  while {magic.xp::%{_p}%.points} < 0: # negative number added
    add 1 to {_i}
    if {_i} > {@maxMagicXpLevelChangeAtOnce}:
      stop
    add getMagicXpToLevelUp({_curr_lvl} - 1) to {magic.xp::%{_p}%.points}
    subtract 1 from {magic.xp::%{_p}%.level}
    send "§5§l↓ You are now §dLevel %{magic.xp::%{_p}%.level}% §5§lin magic XP. §7§o(A negative number was passed into the addMagicXp() function. Ask an admin if something is very broken.)" to {_p}




function getMana(p: player) :: number:
  return {magic.mana::%{_p}%}
function setMana(p: player, amt: number):
  set {magic.mana::%{_p}%} to {_amt}
function addMana(p: player, amt: number):
  add {_amt} to {magic.mana::%{_p}%}
function notEnoughMana(p: player, amt: number):
  send action bar "§d%{_amt}%§5 mana is required!" to {_p}

function getMaxMana(p: player) :: number:
  return floor(log({magic.xp::%{_p}%.level} + 1) * 76 + 20)
function capMana(p: player):
  if getMana({_p}) > getMaxMana({_p}):
    setMana({_p}, getMaxMana({_p}))



function getSpellbookDamageMultiplier() :: number:
  return 1.25
function applyDamageMultiplier(p: player, dmg: number) :: number:
  set {_mult} to (getMana({_p}) / getMaxMana({_p}) / 1.5) + 0.5
  if hasSpellbook({_p}):
    set {_mult} to {_mult} * getSpellbookDamageMultiplier()
  return {_dmg} * {_mult}

function getSpellbookDefenceMultiplier() :: number:
  return 0.5
function applyDefenceMultiplier(p: entity, dmg: number) :: number:
  set {_mult} to 1
  if hasSpellbook({_p}):
    set {_mult} to {_mult} * getSpellbookDefenceMultiplier()
  return {_dmg} / {_mult}

function calcMagicDamage(atk: player, def: entity, dmg: number) :: number:
  set {_dmg_with_atk_mult} to applyDamageMultiplier({_atk}, {_dmg})
  set {_dmg_with_def_mult} to applyDefenceMultiplier({_def}, {_dmg_with_atk_mult})
  return {_dmg_with_def_mult}


function getSpellbookManaCostMultiplier() :: number:
  return 0.5
function applyManaCostMultiplier(p: player, cost: number) :: number:
  set {_mult} to 1
  if hasSpellbook({_p}):
    set {_mult} to {_mult} * getSpellbookManaCostMultiplier()
  return {_cost} * {_mult}

function getSpellbookManaRegenMultiplier() :: number:
  return 0.75
function applyManaRegenMultiplier(p: player, cost: number) :: number:
  set {_mult} to (log({magic.xp::%{_p}%.level} + 2.155) * 3) * 0.25
  if hasSpellbook({_p}):
    set {_mult} to {_mult} * getSpellbookManaRegenMultiplier()
  if metadata "mana_beetroot_bonus" of {_p} is set:
    set {_time} to metadata "mana_beetroot_bonus" of {_p}
    if difference between {_time} and now < {@beetrootRegenTime} seconds:
      set {_mult} to {_mult} * {@beetrootMultiplier} # beetroot soup multiplier
  return {_cost} * {_mult}


function spellParticles(ent: entity, len: number, amt: number, r: number, g: number, b: number, s: number):
  loop {_len} times:
    make console execute command "/execute at %uuid of {_ent}% anchored eyes run particle dust %{_r}% %{_g}% %{_b}% %{_s}% ^ ^0.6 ^%loop-number% 0.1 0.1 0.1 1 %{_amt}%"

function quickswapShieldSpell(p: player):
  set {_spell_before_swap} to metadata "sel_magic_spell" of {_p}
  if {_spell_before_swap} is "shield":
    set metadata "sel_magic_spell" of {_p} to metadata "prev_sel_magic_spell" of {_p}
    set metadata "prev_sel_magic_spell" of {_p} to "shield"
  else:
    set metadata "prev_sel_magic_spell" of {_p} to metadata "sel_magic_spell" of {_p}
    set metadata "sel_magic_spell" of {_p} to "shield"


function addXpLevels(p: player, amt: number):
  make console execute command "/xp add %{_p}% %{_amt}% levels"

function shieldSpellRemaining(p: player) :: timespan:
  if metadata "magic_shield" of {_p} is set:
    set {_time} to metadata "magic_shield" of {_p}
    set {_diff} to difference between {_time} and now
    set {_remaining} to difference between {_diff} and {@shieldSpellDuration} seconds
    if {_remaining} > 0 seconds:
      return {_remaining}



function castSpell(p: player, s: string):
  if metadata "casting_spell" of {_p} is set:
    send action bar "§cYou are already casting a spell!" to {_p}
    stop

  set {_mana_req} to applyManaCostMultiplier({_p}, {magic.spell_costs::%{_s}%})
  if getMana({_p}) < {_mana_req}:
    notEnoughMana({_p}, {_mana_req})
    stop

  if {_s} is "shield":
    apply glowing to {_p} for {@shieldSpellDuration} seconds
    set metadata "magic_shield" of {_p} to now
    show 100 totem at {_p}
    addMana({_p}, 0 - {_mana_req})
    delete metadata "using_magic_spell" of {_p}
    stop
  if {_s} is "hunger":
    remove 0.5 from hunger of {_p}
    addMana({_p}, 0 - {_mana_req})
    delete metadata "using_magic_spell" of {_p}
    stop
  
  set metadata "casting_spell" of {_p} to {_s}
  addMana({_p}, 0 - {_mana_req})
  fireSpell({_p})

function fireSpell(p: player):
  set {_s} to metadata "casting_spell" of {_p}
  loop {@spellFireDelay} times:
    show 5 end rod at {_p}
    send action bar "§5Casting spell §d%{_s}% §5in §d%({@spellFireDelay} - loop-number) / 10% §5seconds..." to {_p}
    wait 0.1 seconds

  if holdingWand({_p}):
    if shieldSpellRemaining({_p}) is set:
      delete metadata "magic_shield" of {_p}
    shoot snowball from {_p}
    send action bar "§5Casted spell §d%{_s}%§5." to {_p}
  else:
    send action bar "§5You need to hold your magic stick to cast spells!" to {_p}

  delete metadata "casting_spell" of {_p}
  delete metadata "using_magic_spell" of {_p}




function getMagicItem(name: string) :: item:
  if {_name} is "spellbook":
    return shiny book named {@spellbookName} with lore "§7While in offhand:", "§ax%getSpellbookManaCostMultiplier()% Mana Cost",  "§ax%getSpellbookDamageMultiplier()% Attack", "§cx%getSpellbookManaRegenMultiplier()% Mana Regen Rate", "§cx%getSpellbookDefenceMultiplier()% Magic Defence"
  if {_name} is "wand":
    return shiny stick named {@wandName} with lore {@wandLore}
  if {_name} is "wand_core":
    return shiny blaze rod named {@wandCoreName} with lore "§dCombine with stick to make magic stick."



on consume:
  event-item is beetroot soup or beetroot
  if event-item is beetroot soup:
    set metadata "mana_beetroot_bonus" of player to now
    send "§5Your §dx{@beetrootMultiplier} §5beetroot mana regen bonus has been refreshed until §d{@beetrootRegenTime} §5seconds from now."
  if event-item is beetroot:
    addMana(player, 10)
    capMana(player)
    send "§d+10 Mana"


on join: # default spells unlocked for all players
  setSpellUnlocked(player, "shield", true)
  setSpellUnlocked(player, "damage", true)

command /unlockspell <player> <string> [<string>]:
  trigger:
    if player is not op:
      send "§cInsufficient permission!"
      stop
    set {_v} to true
    set {_v} to false if arg-3 is set
    setSpellUnlocked(arg-1, arg-2, {_v})
    send "ok"

command /setmagiclevel <number> <player=%player%>:
  trigger:
    if player is not op:
      send "§cInsufficient permission!"
      stop
    set {magic.xp::%arg-2%.level} to arg-1
    send "ok"

command /setmagicpoints <number> <player=%player%>:
  trigger:
    if player is not op:
      send "§cInsufficient permission!"
      stop
    set {magic.xp::%arg-2%.points} to arg-1
    send "ok"

command /mana <number> <player=%player%>:
  trigger:
    if player is not op:
      send "§cInsufficient permission!"
      stop
    setMana(arg-2, arg-1)

command /spell <string>:
  trigger:
    selectSpell(player, arg-1)

command /spellmenu:
  trigger:
    stop if holdingWand(player) is not true

    open chest with 6 rows named "Spell Menu" to player
    wait 1 tick
    loop 54 times:
      format slot (loop-number - 1) of player with light gray stained glass pane named " " to be unstealable
    loop 9 times:
      format slot (loop-number + 45 - 1) of player with red stained glass pane named "§cCancel" to close

    wait 1 tick
    format slot 0 of player with spellItem(player, totem of undying, "shield") named "§5Shield Charm" with lore "§dCost: %{magic.spell_costs::shield}%" to run [send "§dThis spell is not selected from the menu. Right click with your magic stick to toggle the spell." to player]
    format slot 1 of player with spellItem(player, rotten flesh, "hunger") named "§5Burn Calories" with lore "§dSubtracts 1 from your hunger bar so you can eat some beets.", "§dCost: %{magic.spell_costs::hunger}%" to run [selectSpell(player, "hunger")]
    format slot 9 of player with spellItem(player, stick, "disarm") named "§5Disarming Jinx" with lore "§dCost: %{magic.spell_costs::disarm}%" to run [selectSpell(player, "disarm")]
    format slot 10 of player with spellItem(player, piston, "repulse") named "§5Repulsing Spell" with lore "§dCost: %{magic.spell_costs::repulse}%" to run [selectSpell(player, "repulse")]
    format slot 11 of player with spellItem(player, sticky piston, "kidnap") named "§5Kidnapping Spell" with lore "§dCost: %{magic.spell_costs::kidnap}%" to run [selectSpell(player, "kidnap")]
    format slot 12 of player with spellItem(player, iron chestplate, "armour_swap") named "§5Armour Swap Jinx" with lore "§dCost: %{magic.spell_costs::armour_swap}%" to run [selectSpell(player, "armour_swap")]
    format slot 13 of player with spellItem(player, ice, "freeze") named "§5Freezing Jinx" with lore "§dCost: %{magic.spell_costs::freeze}%" to run [selectSpell(player, "freeze")]
    format slot 18 of player with spellItem(player, bread, "damage") named "§5Pain" with lore "§dBasic damage spell dealing {@damageSpellDamage} damage.", "§dCost: %{magic.spell_costs::damage}%" to run [selectSpell(player, "damage")]
    format slot 19 of player with spellItem(player, fire charge, "burn") named "§5Inflammation" with lore "§dCost: %{magic.spell_costs::burn}%" to run [selectSpell(player, "burn")]
    format slot 20 of player with spellItem(player, tnt, "combust") named "§5Combustion" with lore "§dCost: %{magic.spell_costs::combust}%" to run [selectSpell(player, "combust")]
    format slot 27 of player with spellItem(player, bone, "kill_dog") named "§5Canine Carnage" with lore "§dFor killing dogs. Does literally nothing else.", "§dCost: %{magic.spell_costs::kill_dog}%" to run [selectSpell(player, "kill_dog")]



command /getmagicitem <text>:
  trigger:
    if player is not op:
      send "§cInsufficient permission!"
      stop
    give player getMagicItem(arg-1)


on right click:
  player's gamemode is not spectator
  if holdingWand(player):
    cancel event
    if player is not sneaking:
      quickswapShieldSpell(player)
      set {_spell} to metadata "sel_magic_spell" of player
      set {_prev_spell} to metadata "prev_sel_magic_spell" of player
      send "§3Quickswapped spells from §b%{_prev_spell}%§3 to §b%{_spell}%§3."
    else:
      make player execute command "/spellmenu"

on left click:
  player's gamemode is not spectator
  if holdingWand(player):
    if metadata "sel_magic_spell" of player is not set:
      send "§cSelect a spell!"
      stop
    cancel event
    set metadata "using_magic_spell" of player to metadata "sel_magic_spell" of player
    set {_spell} to metadata "using_magic_spell" of player
    castSpell(player, {_spell})

on shoot:
  shooter is player
  metadata "using_magic_spell" of shooter is set
  set {_spell} to metadata "using_magic_spell" of shooter
  set metadata "spell_projectile" of projectile to {_spell}
  set metadata "spell_projectile_spawn_loc" of projectile to location of shooter
  subtract 1 from saturation of shooter
  
  set {_beam_length} to 20
  set {_particle_count} to 15
  set {_particle_size} to 1.3
  if {_spell} is "disarm": # elargbs
    spellParticles(shooter, {_beam_length}, {_particle_count}, 0, 1, 1, {_particle_size})
  if {_spell} is "repulse" or "kidnap":
    spellParticles(shooter, {_beam_length}, {_particle_count}, 1, 0.5, 0.5, {_particle_size})
  if {_spell} is "freeze":
    spellParticles(shooter, {_beam_length}, {_particle_count}, 0.58, 0.78, 0.86, {_particle_size})
  else if {_spell} is "damage":
    spellParticles(shooter, {_beam_length}, {_particle_count}, 0.95, 0.07, 0.07, {_particle_size})
  else if {_spell} is "burn" or "combust":
    spellParticles(shooter, {_beam_length}, {_particle_count}, 0.95, 0.47, 0.07, {_particle_size})
  else:
    spellParticles(shooter, {_beam_length}, {_particle_count}, 1, 1, 1, {_particle_size})



on projectile hit:
  metadata "spell_projectile" of projectile is set
  set {_spell} to metadata "spell_projectile" of shooter

  if block is set:
    play flash at location




on item spawn: # disarming jinx
  metadata "magically_disarmed" of event-entity is set
  set {_disarmer} to metadata "magically_disarmed" of event-entity
  set {_item} to event-item
  set {_vector} to vector between {_item} and {_disarmer}
  push {_item} {_vector} with force 5

on damage:
  projectile is set # because damage cause is projectile doesnt work
  metadata "spell_projectile" of projectile is set
  cancel event
  set {_spell} to metadata "spell_projectile" of projectile


  if metadata "magic_shield" of victim is set:
    set {_shield_timestamp} to metadata "magic_shield" of victim
    difference between now and {_shield_timestamp} < {@shieldSpellDuration} seconds
    addMana(victim, -5)
    send "§dSpell blocked by shield charm" to victim and attacker
    stop

  make attacker damage victim by 0.0001
  set {_dmg} to 0
  set {_add_xp} to 1

  if {_spell} is "disarm":
    chance of applyDamageMultiplier(attacker, 1/3)
    drop victim's tool
    set victim's tool to air
    set metadata "magically_disarmed" of victim to attacker
  if {_spell} is "repulse":
    set {_force} to applyDamageMultiplier(attacker, 3)
    push victim (direction from attacker to victim) at force {_force}
  if {_spell} is "kidnap":
    set {_force} to applyDamageMultiplier(attacker, 3)
    push victim (direction from victim to attacker) at force {_force}
  if {_spell} is "armour_swap":
    set {_h} to helmet of victim
    if chance of 1/3:
      set helmet of victim to chestplate of victim
      set chestplate of victim to {_h}
    else if chance of 1/2:
      set helmet of victim to leggings of victim
      set leggings of victim to {_h}
    else:
      set helmet of victim to boots of victim
      set boots of victim to {_h}
  if {_spell} is "freeze":
    # add attacker to {_p::*}
    # add victim to {_p::*}
    apply slowness 3 to victim for 2 seconds
    loop blocks in radius 3 around victim:
      chance of 80%
      loop-block is air
      make all players see loop-block as ice
  if {_spell} is "damage":
    victim is not armor stand
    set {_dmg} to calcMagicDamage(attacker, victim, {@damageSpellDamage})
    make attacker damage victim by {_dmg}
  if {_spell} is "burn":
    victim is not armor stand
    ignite victim for 20 seconds
  if {_spell} is "combust":
    set {_force} to applyDefenceMultiplier(victim, 2)
    create safe explosion of force {_force} at victim
  if {_spell} is "kill_dog":
    victim is wolf
    set {_dmg} to calcMagicDamage(attacker, victim, 42)
    make attacker damage victim by {_dmg}
    set {_add_xp} to 0

  set {_add_xp} to {_add_xp} * {magic.spell_costs::%{_spell}%} / 10
  addMagicXp(attacker, {_add_xp})
  play sound "block.note_block.pling" at volume 0.1 to attacker
  send action bar "§5Struck §d%victim%§5 with §d%{_spell}% §5spell! (§d%{_dmg}% §dDMG§5) (§d+%{_add_xp}% §dMagic XP§5)" to attacker
  send action bar "§4Struck by §c%{_spell}% §4spell cast by §c%attacker%§4!" to victim

every second:
  loop all players:
    set {_add_mana} to 1
    addMana(loop-player, applyManaRegenMultiplier(loop-player, {_add_mana}))
    capMana(loop-player)

every 1.5 seconds:
  loop all players:
    if holdingWand(loop-player):
      set {_time} to metadata "magic_shield" of loop-player
      set {_diff} to difference between {_time} and now
      if {_diff} < {@shieldSpellDuration} seconds:
        send action bar "§3Shielded from magic damage for §b%shieldSpellRemaining(loop-player)%§3." to loop-player
      else:
        set {_spell} to metadata "sel_magic_spell" of loop-player
        send action bar "§6§l⭐ §e%{_spell}% [%applyManaCostMultiplier(loop-player, {magic.spell_costs::%{_spell}%})%§e] §8| §5§l🔥 Mana: §d%getMana(loop-player)%§5/§d%getMaxMana(loop-player)% §7| §5§lCost: §dx%applyManaCostMultiplier(loop-player, 1)% §7| §5§lRegen: §dx%applyManaRegenMultiplier(loop-player, 1)% §8| §4§l⚔ §cx%applyDamageMultiplier(loop-player, 1)% §7| §3§l🛡 §bx%1 / applyDefenceMultiplier(loop-player, 1)%" to loop-player

every 3 ticks:
  loop all entities:
    loop-entity is snowball
    metadata "spell_projectile" of loop-entity is set
    set {_spell} to metadata "spell_projectile" of loop-entity
    set {_spawn_loc} to metadata "spell_projectile_spawn_loc" of loop-entity
    if distance between {_spawn_loc} and location of loop-entity > {@spellRange}:
      kill loop-entity
      continue



# this is so garbage but skript is garbage
# so i have to do the custom crafting
# like this
on sneak toggle:
  player is sneaking
  if player's tool is nether star or lapis lazuli:
    if item amount of player's tool >= 4:
      if player's offhand tool is lapis lazuli or nether star:
        if item amount of player's offhand tool >= 4:
          remove 4 from item amount of player's tool
          remove 4 from item amount of player's offhand tool
          set {_i} to getMagicItem("wand_core")
        else:
          stop
    else:
      stop
  if player's tool is stick:
    if player's tool is not enchanted:
      if name of player's offhand tool is {@wandCoreName}:
        remove 1 from item amount of player's tool
        remove 1 from item amount of player's offhand tool
        set {_i} to getMagicItem("wand")
  if name of player's tool is {@wandCoreName}:
    if player's offhand tool is stick:
      if player's offhand tool is not enchanted:
        remove 1 from item amount of player's tool
        remove 1 from item amount of player's offhand tool
        set {_i} to getMagicItem("wand")
  
  {_i} is set
  if player's inventory can hold {_i}:
    give player {_i}
  else:
    drop {_i} at player